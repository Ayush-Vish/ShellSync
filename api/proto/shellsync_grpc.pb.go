// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/shellsync.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShellSync_CreateSession_FullMethodName = "/shellsync.ShellSync/CreateSession"
	ShellSync_Stream_FullMethodName        = "/shellsync.ShellSync/Stream"
)

// ShellSyncClient is the client API for ShellSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShellSyncClient interface {
	// Creates a new SSH Session for a given host
	CreateSession(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Stream real time commands and op of the terminal
	Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientUpdate, ServerUpdate], error)
}

type shellSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewShellSyncClient(cc grpc.ClientConnInterface) ShellSyncClient {
	return &shellSyncClient{cc}
}

func (c *shellSyncClient) CreateSession(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ShellSync_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shellSyncClient) Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientUpdate, ServerUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ShellSync_ServiceDesc.Streams[0], ShellSync_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientUpdate, ServerUpdate]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShellSync_StreamClient = grpc.BidiStreamingClient[ClientUpdate, ServerUpdate]

// ShellSyncServer is the server API for ShellSync service.
// All implementations must embed UnimplementedShellSyncServer
// for forward compatibility.
type ShellSyncServer interface {
	// Creates a new SSH Session for a given host
	CreateSession(context.Context, *CreateRequest) (*CreateResponse, error)
	// Stream real time commands and op of the terminal
	Stream(grpc.BidiStreamingServer[ClientUpdate, ServerUpdate]) error
	mustEmbedUnimplementedShellSyncServer()
}

// UnimplementedShellSyncServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShellSyncServer struct{}

func (UnimplementedShellSyncServer) CreateSession(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedShellSyncServer) Stream(grpc.BidiStreamingServer[ClientUpdate, ServerUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedShellSyncServer) mustEmbedUnimplementedShellSyncServer() {}
func (UnimplementedShellSyncServer) testEmbeddedByValue()                   {}

// UnsafeShellSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShellSyncServer will
// result in compilation errors.
type UnsafeShellSyncServer interface {
	mustEmbedUnimplementedShellSyncServer()
}

func RegisterShellSyncServer(s grpc.ServiceRegistrar, srv ShellSyncServer) {
	// If the following call pancis, it indicates UnimplementedShellSyncServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShellSync_ServiceDesc, srv)
}

func _ShellSync_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellSyncServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShellSync_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellSyncServer).CreateSession(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShellSync_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShellSyncServer).Stream(&grpc.GenericServerStream[ClientUpdate, ServerUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShellSync_StreamServer = grpc.BidiStreamingServer[ClientUpdate, ServerUpdate]

// ShellSync_ServiceDesc is the grpc.ServiceDesc for ShellSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShellSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shellsync.ShellSync",
	HandlerType: (*ShellSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _ShellSync_CreateSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _ShellSync_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/shellsync.proto",
}
