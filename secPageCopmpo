'use client';

import React, { useState, useRef, useCallback, useEffect } from 'react';
import InfiniteCanvas, { CanvasRef } from '@/components/canvas/InfiniteCanvas';
import { Maximize, Terminal as TerminalIcon } from 'lucide-react';
import Xterm, { XtermRef } from '@/components/terminal/Terminal';
import { SocketMessage, useTerminalSocket } from '@/hooks/useSocket';
import { useParams, useSearchParams } from 'next/navigation';

// --- DraggableTerminal Component ---
interface CanvasItem {
    id: string; // This will be the terminalId
    position: { x: number; y: number };
    type: 'terminal'; // Explicitly type this item as a terminal
}

interface DraggableTerminalProps {
    item: CanvasItem;
    onPositionChange: (id: string, position: { x: number; y: number }) => void;
    zoom?: number; // Injected by InfiniteCanvas
    setCanvasPanningLocked?: (isLocked: boolean) => void; // Injected by InfiniteCanvas
    sessionId: string;
    clientId: string;
}

const DraggableTerminal = ({
                               item,
                               onPositionChange,
                               zoom = 1,
                               setCanvasPanningLocked,
                               sessionId,
                               clientId,
                           }: DraggableTerminalProps) => {
    const dragRef = useRef<HTMLDivElement>(null);
    const isDraggingRef = useRef(false);
    const xTermref = useRef<XtermRef>(null);

    const initialPointerPosition = useRef({ x: 0, y: 0 });
    const initialItemPosition = useRef({ x: 0, y: 0 });

    // Handle incoming WebSocket messages for this specific terminal instance
    const handleSocketMessage = useCallback((message: SocketMessage) => {
        // Ensure the message is of type pty_output, has content, AND is for THIS specific terminal
        if (message.type === 'pty_output' && message.content && message.terminalId === item.id) {
            xTermref.current?.write(message.content);
        }
    }, [item.id]);

    // Use the WebSocket hook for this terminal's I/O
    const { sendMessage } = useTerminalSocket(sessionId, clientId, handleSocketMessage);

    // Handle data input from the XTerm component
    const handleTerminalData = (data: string) => {
        // Send the raw user input to the backend over the WebSocket,
        // specifying the terminalId so the backend can route it correctly.
        sendMessage('pty_input', data, item.id);
    };

    // Pointer event handlers for dragging the terminal window
    const handlePointerDown = (e: React.PointerEvent) => {
        // Only allow dragging with primary mouse button (left-click)
        if (e.button !== 0) return;

        // Determine if the click is on the draggable part (e.g., title bar)
        // or directly on the terminal content. If on terminal content, don't drag.
        const isClickOnTerminalContent = (e.target as HTMLElement).closest('.xterm-viewport');

        if (!isClickOnTerminalContent) {
            setCanvasPanningLocked?.(true); // Lock canvas panning when dragging a terminal
            e.stopPropagation(); // Stop event propagation to prevent canvas from also handling the drag

            isDraggingRef.current = true;
            initialPointerPosition.current = { x: e.clientX, y: e.clientY };
            initialItemPosition.current = item.position;

            if (dragRef.current) {
                dragRef.current.style.cursor = 'grabbing';
                dragRef.current.setPointerCapture(e.pointerId); // Capture pointer events
            }
        }
    };

    const handlePointerMove = (e: React.PointerEvent) => {
        if (!isDraggingRef.current) return;

        const dx = e.clientX - initialPointerPosition.current.x;
        const dy = e.clientY - initialPointerPosition.current.y;

        // Adjust position based on zoom level to ensure consistent dragging speed
        const newX = initialItemPosition.current.x + dx / zoom;
        const newY = initialItemPosition.current.y + dy / zoom;

        onPositionChange(item.id, { x: newX, y: newY });
    };

    const handlePointerUp = (e: React.PointerEvent) => {
        setCanvasPanningLocked?.(false); // Unlock canvas panning after drag ends

        if (!isDraggingRef.current) return;

        isDraggingRef.current = false;
        if (dragRef.current) {
            dragRef.current.style.cursor = 'grab';
            dragRef.current.releasePointerCapture(e.pointerId); // Release pointer capture
        }
    };

    return (
        <div
            ref={dragRef}
            className="absolute rounded-lg shadow-xl select-none overflow-hidden border border-gray-700"
            style={{
                left: `${item.position.x}px`,
                top: `${item.position.y}px`,
                width: '640px', // Fixed width for the terminal window
                height: '400px', // Fixed height for the terminal window
                backgroundColor: '#1e1e1e', // Dark background for the terminal container
                cursor: 'grab', // Default cursor for draggable area
                touchAction: 'none', // Disable default touch actions (e.g., scrolling) for dragging
            }}
            onPointerDown={handlePointerDown}
            onPointerMove={handlePointerMove}
            onPointerUp={handlePointerUp}
            onPointerCancel={handlePointerUp} // Handle pointer cancellation (e.g., lost focus)
        >
            {/* macOS style buttons and title bar - this is the primary drag handle */}
            <div className="flex space-x-2 px-4 py-2 bg-[#2d2d2d]"
                 onPointerDown={(e) => {
                     // Allow dragging from the title bar area
                     handlePointerDown(e);
                     e.stopPropagation(); // Prevent terminal focus on title bar click
                 }}>
                <div className="w-3 h-3 bg-red-500 rounded-full" />
                <div className="w-3 h-3 bg-yellow-500 rounded-full" />
                <div className="w-3 h-3 bg-green-500 rounded-full" />
                <span className="ml-auto text-gray-400 text-xs">Terminal ID: {item.id}</span>
            </div>

            {/* Terminal itself - takes remaining height */}
            <div className="flex-grow h-[calc(100%-30px)]"> {/* Adjust height to account for the title bar (approx 30px) */}
                <Xterm ref={xTermref} onData={handleTerminalData} />
            </div>
        </div>
    );
};

// --- Toolbar Component ---
const Toolbar = ({ onAddItem, onReset }: { onAddItem: () => void, onReset: () => void }) => (
    <div className="absolute top-4 left-4 z-10 flex items-center gap-2">
        <button
            onClick={onAddItem}
            className="flex items-center gap-2 px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors shadow-lg"
        >
            <TerminalIcon size={18} /> {/* Using Lucide React's Terminal icon */}
            Add Terminal
        </button>
        <button
            onClick={onReset}
            className="flex p-2 bg-neutral-700 text-white rounded-md hover:bg-neutral-600 transition-colors shadow-lg"
            title="Reset View"
        >
            <Maximize size={18} />
        </button>
    </div>
);

// --- Main CanvasPage Component ---
export default function CanvasPage() {
    const params = useParams();
    const searchParams = useSearchParams();
    const sessionId = params.slug as string;
    const clientId = searchParams.get('client_id');

    // Use an array to store multiple terminal items
    const [items, setItems] = useState<CanvasItem[]>([]);
    const canvasRef = useRef<CanvasRef>(null);

    // This is the main WebSocket connection for the page, used to
    // send requests to create new terminals and listen for their creation confirmations.
    const handlePageSocketMessage = useCallback((message: SocketMessage) => {
        console.log('Received page socket message:', message); // Debug log

        // When the backend confirms a terminal has been created
        if (message.type === 'terminal_created' && message.terminalId) {
            const newTerminalId = message.terminalId;
            console.log('Creating terminal with ID:', newTerminalId); // Debug log

            // Use functional state update to avoid stale closure issues
            setItems((prevItems) => {
                // Check if terminal already exists to prevent duplicates
                if (prevItems.some(item => item.id === newTerminalId)) {
                    console.log('Terminal already exists, skipping creation'); // Debug log
                    return prevItems;
                }

                const newItem: CanvasItem = {
                    id: newTerminalId,
                    position: canvasRef.current?.getCanvasCenter() ?? {
                        x: 200 + prevItems.length * 50,
                        y: 200 + prevItems.length * 50
                    },
                    type: 'terminal',
                };

                console.log('Adding new terminal item:', newItem); // Debug log
                return [...prevItems, newItem];
            });
        }

        // Handle any error messages
        if (message.type === 'error') {
            console.error('WebSocket error:', message.content || message.error);
        }
    }, []); // Remove items dependency to avoid stale closure

    // Establish the main page-level WebSocket connection
    const { sendMessage: sendPageMessage, isConnected, reconnect, connectionAttempts } = useTerminalSocket(sessionId, clientId, handlePageSocketMessage);

    // Request an initial terminal from backend on mount if none exist
    useEffect(() => {
        if (sessionId && clientId && items.length === 0 && isConnected) {
            console.log('Requesting initial terminal'); // Debug log
            sendPageMessage('create_terminal');
        }
    }, [sessionId, clientId, items.length, sendPageMessage, isConnected]);

    const handleAddTerminal = () => {
        console.log('Add terminal button clicked, connection status:', isConnected); // Debug log
        if (!isConnected) {
            console.error('WebSocket not connected, attempting to reconnect...');
            reconnect(); // Try to reconnect

            // Try sending the message after a short delay to allow reconnection
            setTimeout(() => {
                console.log('Retrying create_terminal message after reconnect attempt');
                sendPageMessage('create_terminal');
            }, 1000);
            return;
        }

        // Send a 'create_terminal' message to the backend via the main page socket
        console.log('Sending create_terminal message'); // Debug log
        const success = sendPageMessage('create_terminal');
        if (!success) {
            console.error('Failed to send create_terminal message');
        }
    };

    const handleResetView = () => {
        canvasRef.current?.resetView();
    };

    const handlePositionChange = (id: string, position: { x: number; y: number }) => {
        setItems((currentItems) =>
            currentItems.map((item) =>
                item.id === id ? { ...item, position } : item
            )
        );
    };

    if (!sessionId || !clientId) {
        return (
            <div className="flex h-screen items-center justify-center bg-black text-red-500">
                Error: Session ID and Client ID are required.
            </div>
        );
    }

    return (
        <div className="h-screen w-screen bg-neutral-800">
            <Toolbar onAddItem={handleAddTerminal} onReset={handleResetView} />

            {/* Debug info - remove in production */}
            <div className="absolute top-4 right-4 z-10 bg-black/50 text-white p-2 rounded text-xs">
                <div>Connected: {isConnected ? '✅ Yes' : '❌ No'}</div>
                <div>Terminals: {items.length}</div>
                <div>Session: {sessionId}</div>
                <div>Client: {clientId}</div>
                {connectionAttempts > 0 && <div>Reconnect attempts: {connectionAttempts}</div>}
                {!isConnected && (
                    <button
                        onClick={reconnect}
                        className="mt-2 px-2 py-1 bg-blue-600 text-white rounded text-xs hover:bg-blue-700"
                    >
                        Reconnect
                    </button>
                )}
            </div>

            <InfiniteCanvas ref={canvasRef}>
                {items.map((item) => (
                    <DraggableTerminal
                        key={item.id} // Use key for React to track it
                        item={item}
                        onPositionChange={handlePositionChange}
                        sessionId={sessionId} // Pass session ID
                        clientId={clientId}   // Pass client ID
                    />
                ))}
            </InfiniteCanvas>
        </div>
    );
}